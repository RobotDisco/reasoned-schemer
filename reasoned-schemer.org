#+TITLE: The Reasoned Schemer

* =core.logic=, not scheme

Remember that we're using core.logic instead of whatever scheme the book uses. Keep the following differences in mind: https://github.com/clojure/core.logic/wiki/Differences-from-The-Reasoned-Schemer

* Preamble
Remember to load core.logic

#+begin_src emacs-lisp :results silent
  (require 'ob-clojure)
  (setq org-babel-clojure-backend 'cider)
#+end_src

#+begin_src clojure :results silent
  (require '[clojure.core.logic :refer [run* u# s# == fresh conde lcons lcons?
					run llist]])

  ;; `core.logic` no longer has `defrel`. Thanks to Alexander Fertman via cscabal for this snippet.
  ;; In hindsight I could have realized this from the footnote in chapter 1 frame 82.

  (defmacro defrel
    [rel arglist & goals]
    `(defn ~rel ~arglist
       (fn
	 ;; Why is this s# when the book is (s) not (#s)?
	 ;; Oh in a clojure macro s# is a gensymed symbol, not our core.logic
	 ;;symbol for unconditional success?
	 [s#]
	 (fn
	   []
	   ((conde [~@goals]) s#)))))

  ;; chapter 2, frame 6
  (defrel caro [p a]
    (fresh [d]
      (== (lcons a d) p)))
  ;; chapter 2, frame 13
  (defrel cdro [p d]
    (fresh [a]
      (== (lcons a d) p)))
  ;; chapter 2, frame 25
  (defrel conso1 [a d p]
    (caro p a)
    (cdro p d))
  ;; chapter 2, frame 26
  (defrel conso [a d p]
    (== (lcons a d) p))
  ;; chapter 2, frame 33
  (defrel nullo [x]
    ;; We are pretending to be scheme, so we will pretend `nil` does not exist
    (== '() x))
  ;; Chapter 2 frame 46
  (defrel pairo [p]
    (fresh [a d]
      (conso a d p)))
  ;; Clojure doesn't have pair?
  ;; so stealing it from https://github.com/clojure/core.logic/wiki/Differences-from-The-Reasoned-Schemer
  (defn pair? [x]
    (or (lcons? x) (and (coll? x) (seq x))))
  ;; Chapter 2 frame 58
  (defn singleton? [l]
    (cond
      (pair? l) (empty? (rest l))
      :else false))
  ;; Chapter 2 frame 64
  (defrel singletono1 [l]
    (conde
     [(pairo l)]
     [(fresh (d)
	(cdro l d)
	(nullo d))]
     [(s# u#)]))
  ;; Chapter 2 frame 68 simplified version
  (defrel singletono [l]
    (fresh [d]
      (cdro l d)
      (nullo d)))
  ;; Chapter 3 frame 5
  (defrel listo1 [l]
    (conde
     [(nullo l) s#]
     [(pairo l) (fresh [d]
		  (cdro l d)
		  (listo d))]
     [s# u#]))
  ;; Chapter 3 frame 7 (simplified)
  (defrel listo2 [l]
    (conde
     [(nullo l) s#]
     [(fresh [d]
	(cdro l d)
	(listo d))]))
  ;; Chapter 3 frame 8 (simplified even more)
  (defrel listo [l]
    (conde
     [(nullo l)]
     [(fresh [d]
	(cdro l d)
	(listo d))]))
  ;; Chapter 3 frame 21
  (defn lol? [l]
    (cond
      (empty? l) true
      (list? (first l)) (lol? (rest l))
      :else false))
  ;; Chapter 3 frame 22
  (defrel lolo1 [l]
    (conde
     [(nullo l) s#]
     [(fresh [a]
	(caro l a)
	(listo a))
      (fresh [d]
	(cdro l d)
	(lolo d))]
     [s# u#]))
  ;; simplifies to
  (defrel lolo [l]
    (conde
     [(nullo l)]
     [(fresh [a]
	(caro l a)
	(listo a))
      (fresh [d]
	(cdro l d)
	(lolo d))]))
    ;; Chapter 3 Frame 33
#+end_src

* Chapter 1. Playthings
** Frame 7
- ~u#~ :: A goal that can never be met
- ~s#~ :: A goal that is always met

#+begin_src clojure :results pp
  (run* [q] u#)
#+end_src

#+RESULTS:
: ()
: 

** Frame 10
- ~==~ :: Succeed if the first value is the same as the second

    Note that this is a goal; it succeeds or it does not.

#+BEGIN_SRC clojure :results pp
  (run* [q] (== 'pea 'pod))
#+END_SRC

#+RESULTS:
: ()
: 

** Frame 11
#+BEGIN_SRC clojure :results pp
  (run* [q] (== q 'pea))
#+END_SRC

#+RESULTS:
: (pea)
: 

We return a list containing =pea= because that's a value of q which would be equivalent to =pea=

** What do I think =run*= is?
Return a list of all possible values of [input variables] that would result in the supplied body of goals succeeding.

** The First Law of ≡

(≡ v w) can be replaced by (≡ w v).

** value associated with

- what is the value of :: returns the output of =run*=
- what is the value associated with :: returns the contents of =run*= without that outer list.


We do this to remove that outer list which we often don't care about.

** frame 15 (non-freshness)

A variable stops being fresh when we assign it a value to make goals succeed.

For example, in =(run* [q] (== q 'pea))=, =q= stops being fresh because we end up assigning th evalue ='pea= to it.

** frame 16 (freshness)
A variable remains fresh if we never assign it a value.

For example, in =(run* [q] s#)=, =q= remains fresh because there is no specific value that makes =s#= succeed, since =s#= *always* succeeds.

** freshness quote

"Every variable is initially fresh. A variable is no longer fresh if it becomes associated with a non-variable value or if it becomes
associated with a variable that, itself, is no longer fresh."

So I guess if variable =q= is set to equal =p=, we need to figure out what =p= is before knowing if =q= is fresh or not.

** Frame 18, 19, 20

#+BEGIN_SRC clojure :results pp
  (run* [q] s#)
#+END_SRC

#+RESULTS:
: (_0)
: 

#+BEGIN_SRC clojure :results pp
  (run* [q] (== 'pea 'pea))
#+END_SRC

#+RESULTS:
: (_0)
: 

#+BEGIN_SRC clojure :results pp
  (run* [q] (== q q))
#+END_SRC

#+RESULTS:
: (_0)
: 

=(_0)= means that =q= remains fresh. In this book's lingo it means that the variable was *reified*

** Frame 23

We can use =(fresh)= to introduce new variables other than the one whose values we care about

#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (== 'pea q)))
#+END_SRC

#+RESULTS:
: (pea)
: 

See how we don't care about =x=, but it remains fresh above. =q= in this case gets assigned the value ='pea= to make the goal succeed.

** Frame 24
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (== 'pea x)))
#+END_SRC

#+RESULTS:
: (_0)
: 

In this case, while =x= get associated with ='pea= to make the goal succeed, but =q= remains fresh as its value is irrelevant for the success of any goals.

** Frame 25

#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (== (cons x '()) q)))
#+END_SRC

#+RESULTS:
: ((_0))
: 

Note they asked us for the /value associated with/, not the value. This means the book prints only the inner list.

While =q= equals ~(x)~ in this case, =x= is never assigned a value so it gets reified as =_0=.

** Frame 26

Apparently I can't quasiquote in core.logic, I have to break things into lists and symbols.

#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (== (list x) q)))
#+END_SRC

#+RESULTS:
: ((_0))
: 

This is the same as Frame 25 but showing that quasiquotes can be used instead of explicitly consing values together.

** Frame 29

We can use ~(== a b)~ to say that the fresh variable a is the same as the fresh variable b. This is called *fusing*.

** Frame 33
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (== (list (list (list 'pea)) 'pod) (list (list (list 'pea)) q)))
#+END_SRC

#+RESULTS:
: (pod)
: 

In order to make this goal succeed, =q= as to be =pod=

** Frame 35
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (== (list (list (list q)) 'pod) (list (list (list x)) 'pod))))
#+END_SRC

#+RESULTS:
: (_0)
: 

In this case =q= and =x= fuse together and have the same value every time this goal succeeds, but we never need to assign q/x a value because any value will do. They remain fresh.
** Frame 36
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (== (list (list (list q)) x) (list (list (list x)) 'pod))))
#+END_SRC

#+RESULTS:
: (pod)
: 

Because these two lists are structurally the same, we know that the =pod= in the last list's last position maps to the =x= in the first lists' last position. And this means that the =x= in the last list's first position is =pod=, and since =q= structunrally maps to =x= (i.e. =q= is fused with =x=), we know that it too is =pod=. And thus, =pod= is associated to the variable =q=.

** Frame 37
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (== (list x x) q)))
#+END_SRC

#+RESULTS:
: ((_0 _0))
: 

We see that ~q~ is ~(x x)~, but we don't assign any variable to =x=, so we see that =q= is a pair of =x= values, reified as =(_0 _0)=. I don't know whether this means that =q= is fresh or not; it has a clear structure so therefore isn't entirely undefined, but contains fresh subcomponents.
** Realization about reified variables.
Fresh variables are possibly only reified when I print the result because I need to represent the fresh variables _somehow_, so the reification assigns the variable a value that isn't valid for computation but makes sense in the context of representing the expression. The variable still however doesn't have any value if it was to be used in other computations (if that's even possible.)

** Frame 38
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (fresh [y]
	(== (list q y) (list (list x y) x)))))
#+END_SRC

#+RESULTS:
: ((_0 _0))
: 

Basically plug values int oeach other, and at the end, =x= is fused to =y= and =q= shows itself to be =(x y)= which basically means =(x x)= or =(y y)=, and thus gets reified as =(_0 _0)=
** Frame 39 - When are two variables different?
Two variables are different when they have not been fused.

When introduced as either fresh variables or run* input variables, all variables are considered different from each other.

** Frame 41

Here we see what happens when you reify two variables that haven't been fused. =q= maps to =(x y)=, but =x= and =y= have not been fused and thus must be shown as different.

#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (fresh [y]
	(== (list x y) q))))
#+END_SRC

#+RESULTS:
: ((_0 _1))
: 

This is why we see a pair of =_0 _1_=, because these two fresh variables are different, their values can be any two different ones.

** Frame 43
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (fresh [y]
	(== (list x y x) q))))
#+END_SRC

#+RESULTS:
: ((_0 _1 _0))
: 

Here we see that =q= is =x y x=, and =x= and =y= remain fresh. As such, when we reify we'll see two =_0= reifications and one _1= reification.

=x= reifies to =_0= because it's the first variable we encounter.

** Frame 48/49

- occurrence :: A variable =x= occurs in variable =v= when it appears in the value associated with =v=.

- occurrence :: A variable =x= occurs in list =l= when it or any variable fused with =x= is an element of list =l=, or occurs in any element of =l= (i.e. recursive).

** The Second Law of ≡
If x is fresh, then (≡ v x) succeeds and associates v with x, unless x occurs in v.

** Frame 50
#+BEGIN_SRC clojure :results pp
  (run* [q]
    s#
    s#)
#+END_SRC

#+RESULTS:
: (_0)
: 

=core.logic= don't have conj2 and disj2, I don't have a reference guide, but based on https://github.com/clojure/core.logic/wiki/A-Core.logic-Primer#user-content-Logic_Programming I think that conjunctions (AND) are implicitly the body or =run*= and =fresh= and disjunctions (OR) are defined as branches of something called =conde=
** Frame 51
#+BEGIN_SRC clojure :results pp
  (run* [q]
    s#
    (== 'corn q))
#+END_SRC

#+RESULTS:
: (corn)
: 

=true= && ('corn == q)
** Frame 52
#+BEGIN_SRC clojure :results pp
  (run* [q]
    u#
    (== 'corn q))
#+END_SRC

#+RESULTS:
: ()
: 

q is associated with no value, because no value would satisfy (~false && ('corn == q)~)
** Frame 53
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (== 'meal q)
    (== 'corn q))
#+END_SRC

#+RESULTS:
: ()
: 

=q= can't be =corn= and =meal= at the same time.
** Frame 56
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (conde 
     [(== 'olive q)]
     [u#]))
#+END_SRC

#+RESULTS:
: (olive)
: 

~(q == 'olive) || false~
** Frame 58
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (conde 
     [(== 'olive q)]
     [(== 'oil q)]))
#+END_SRC

#+RESULTS:
: (olive oil)
: 

~(q == 'olive) || (q == 'oil)~, so =q= can be either of these two values, so our value is a list of the two qualifying values of =q=.
** Frame 59
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (fresh [y]
	(conde
	 [(== (list x y) q)]
	 [(== (list y x) q)]))))
#+END_SRC

#+RESULTS:
: ((_0 _1) (_0 _1))
: 

We haven't fused =x= and =y=, so while we don't associate a value with any of these variables, we cannot consider them the same. Also, being a disjunction where both branches can potentially succeed, we have to provide a value for both of them, reifying variables in order of showing up in each sub-expression.

Also, remember that since each branch is a new value, our reification numbering start anew from the first variable encountered.
** Reminder about conde 
(An implementation node ... I have to remember that each disjunction branch has to be wrapped in a list =[ ]= otherwise I am using a single OR branch with two ANDed components....

For example,

#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x]
      (fresh [y]
	(conde [(== (list x y) q)
		(== (list y x) q)]))))
#+END_SRC

#+RESULTS:
: ((_0 _0))
: 

effectively means a conjunction between two goals since the conde disjunction has only one branch, whereas the frame actually wanted two conde branches to make a disjunction between those same two expressions.
** Frame 61

#+BEGIN_SRC clojure :results pp
  (run* [x]
    (conde [(== 'oil x)]
	   [(== 'olive x)]))
#+END_SRC  

#+RESULTS:
: (oil olive)
: 

#+BEGIN_SRC clojure :results pp
  (run* [x]
    (conde [(== 'olive x)]
	   [(== 'oil x)]))
#+END_SRC

#+RESULTS:
: (olive oil)
: 

When evaluating equivalence between output values, the order doesn't matter. So in this case, the value of these two expressions are equivalent.
** Frame 65
#+BEGIN_SRC clojure :results pp
  (run* [x]
    (conde [(== 'virgin x) u#]
	   [(conde [(== 'olive x)]
		   [(conde [s#]
			   [(== 'oil x)])])]))
#+END_SRC

#+RESULTS:
: (olive _0 oil)
: 

It looks like we have to consider every branch of a conde, even if they are trivial, for successful values, independantly of other branches. This is why our value includes a _0, because there is a branch where success is guaranteed regardless of value._

What is interesting is that we omit values, including a ~()~, for that first =conde= branch which cannot ever be successful. So we only ever gather successes.
** Frame 79
Ah here we learn that =run= and =fresh= body sequences are effectively conjunctions.
** Frame 72 - defrel

#+BEGIN_SRC clojure :results pp
  (defn teacupo [t]
    (fn [s]
      (fn []
	((conde [(== t 'tea)]
		[(== t 'cup)])
	 s))))
#+END_SRC

#+RESULTS:
: #'user/teacupo
: 

I don't really understand this, but I see a bunch of thunking, and the notes say that it is important that =s=, while being passed through into the =conde= which returns a function result, is never referenced in the argument list or body of the "relation" we actually care about (it is thunking infrastructure.)

This is why we use a macro, to hide that secret passthru value. The book advertises scheme's hygienic macros for this reason. I don't understand, and we'll come back to this later.
** Frame 73 - Definition of a relation
A relation is a function that returns a goal.

Relations by convention have names which end with the letter o; hence =teacupo=.
** Frame 86

#+BEGIN_SRC clojure :results pp
  (run* [x y]
    (teacupo x)
    (teacupo x))
#+END_SRC

#+RESULTS:
: ([tea _0] [cup _0])
: 

This is a conjunction, so when we evaluate the second teacupo call, s has already been bound to a value. This is why we only have two tuples. If this was a disjunction I bet we'd have four because we'd need to evaluate the disjunction branches independantly.

#+BEGIN_SRC clojure :results pp
    (run* [x y]
      (conde [(teacupo x)]
	     [(teacupo x)]))
#+END_SRC

#+RESULTS:
: ([tea _0] [tea _0] [cup _0] [cup _0])
: 

Yup.
** Frame 92 - Introduces =conde=
=conde= can be used in place of =conj2= and =disj2=. Which is why =core.logic= doesn't have it.
** The law of =conde=
Every successful =conde= line contributes one or more values.
* Chapter 2. Teaching Old Toys New Tricks
** Frame 5 (now that we've implemented =caro=)
#+BEGIN_SRC clojure :results pp
  (run* [r]
    (fresh [x y]
      (caro (list r y) x)
      (== 'pear x)))
#+END_SRC

#+RESULTS:
: (pear)
: 
** Frame 9
Variables introduced by =fresh= are values, and regular scheme-like functions can take values as input

(as compared to =conso= which can take outputs like =r= because they are relations?)
** Frame 12
=unnesting= will become important, using =fresh= variables and unpacking ~(car (cdr (cdr (cdr ...))))~ into as many fresh variables as needed and sequences of =cdro= like ~(cdro l v); (cdr v w); (cdr w z); (cdr w ...) ...)~
** Frame 26
;; Alternate form of =conso= using ~==~ instead of =caro=/=cdro=
#+BEGIN_SRC clojure :results pp
    (defrel conso1 [a d p]
      (== (lcons a d) p))
#+END_SRC

#+RESULTS:
: ((a b c d e))
: 
** The Translation (Initial)
To translate a function into a relation, first replace =define= with =defrel=. Then unnest each expression in each =cond= line, and replace each =cond= with =conde=. To unnest a =true=, replace it with =s#=. To unnest a =false=, replace it with =u#=

(what does unnesting mean?)
** Frame 65
I guess unnesting means turn an scheme/clojure expression into a set of reasonedschemer? exceptions, since you often need to split a nested scheme expression into a series of fresh declarations, intermediate variables, and translated function invocations.
** The law of u#
Any =conde= line that has =u#= as a top-level goal cannot contribute values.
** Define both =caro= and =cdro= using =conso=
#+BEGIN_SRC clojure :results pp
  (defrel caro1 [p a]
    (fresh [d]
      (conso a d p)))

  (defrel cdro1 [p d]
    (fresh [a]
      (conso a d p)))
#+END_SRC

#+RESULTS:
: #'user/cdro1
: 
* Chapter 3. Seeing old friends in new ways
** The law of s#:
Any top-level s# can be removed from a =conde= line.
** Realization about law of =s#=
Oh. =(conde [thing1 thing2])=, unlike conds, don't require the first thing to be a predicate. Everything is a predicate that returns a goal. So this is why you don't need to write =(conde [(nullo l) s#])= but instead I can write =(conde [(nullo l)])=.

This is because that first thing itself returns a s#, the second s# is thus redundant since it is part of an implicit and/conjunction.

** Translating laws of =u#=/=s#= into more intuitive things
We can remove =s#= from top-lines of cond because they're redundant in conjunctions, thus they don't influence the decision at all.

We remove all conde lines with a top-level =u#= because those are unconditional falses in a implicit conjunction, thus it will always fail.
** Frame 11
If you step through the function in your head or on paper, you will see that at no point do you evaluate or assign the =x= variable, you only ever look at the =cdr= of the input list. Hence how we can return a =_0=
** Frame 12
We have no value because we never terminate.

But we have to evaluate =x= because we evaluate =cdr= and get =x= as a cdr. And thus we have to consider all possible values? And in this case, any value works if it is a list?

Also, we've learned that our input variable isn't magical, it follows the laws of any eager language.
** Frame 13
=run= is a function that given a positive integer N and a list of input variables and a body of goals, returns N elements containing a set of potential values for those variables.
** Frame 14
#+BEGIN_SRC clojure :results pp
  (run 1 [x]
    (listo (llist 'a 'b 'c x)))
#+END_SRC

#+RESULTS:
: (())
:

So as long as =x= is a list, this thing is a proper list. So we start with the simplest one, an empty list.

** Frame 17
So step through =listo= and think of the first way to get a success. It would be when =(nilo l)=, the first condition, succeeds. And that means we know that a value of '()' succeeds, so it can be the first one we return.
** Frame 18
#+BEGIN_SRC clojure :results pp
  (run 5 [x]
    (listo (llist 'a 'b 'c x)))
#+END_SRC

#+RESULTS:
: (() (_0) (_0 _1) (_0 _1 _2) (_0 _1 _2 _3))
: 

OK so I am relieved. Here we see five potential values.
The first time we ask "what value do we need for =nullo= to succeed?"

The second time we assume we get a non-null value, go down the cdr (skipping over evaluating the car) and then, in the recursive =nullo= call, getting the value that makes =nullo= succeed. So we get =(_0)=

But what if we instead went down the =cdr= path again? We know we'd have a fresh value followed by another list, which isn't null so we have a second fresh value, and now we recurse a second time, and return an empty list this second time, so now we have =(_0 _1)=.

And we go again, this time getting =(_0 _1 _2)= and so on, until we get five values.

The ordering doesn't formally matter, but this is how I imagine a turing machine doing it.
** Frame 19
Oh interesting, what introduces that additional fresh value? The =(fresh [d] ...)= that we keep recusively interating over, and fusing in the =cdro= call.
** Frame 24
This frame reminds us to work through a =lolo= invocation as if we were debugging it to understand what is happening at each moment of execution.
** Frame 25
Notice how we evaluate through and fuse as needed (i.e. figure out a value of =x= and then realize we have our first value of =q=, which doesn't matter in this success, and thus return a reified variable.)
** Frame 27
Work through each defrel, line by line, and figure out all the branches and values that get each fresh variable to make the goal succeed, for as many values as needed.
** Frame 32
#+BEGIN_SRC clojure :results pp
  (defrel singletono32 [l]
    (fresh [a]
      (== (llist a) l)))
#+END_SRC

#+RESULTS:
: class clojure.lang.Compiler$CompilerException
** Frame 33
#+BEGIN_SRC clojure :results silent
  (defrel loso [l]
    (conde
     [(nullo l)]
     [(fresh [a]
	(caro a l)
	(singletono a))
      (fresh [d]
	(cdro d l)
	(loso l))]))
#+END_SRC
** Frame 44
#+BEGIN_SRC clojure :results pp
  (defrel membero1 [x l]
    (conde
     [(nullo l) u#]
     [(fresh [a]
	(caro l a)
	(== a x))
      s#]
     [s# (fresh [d]
	   (cdro l d)
	   (membero x d))]))
#+END_SRC

#+RESULTS:
: #'user/membero1
: 

** Frame 46
#+BEGIN_SRC clojure :results pp
  (defrel membero2 [x l]
    (conde
     [(fresh [a]
	(caro l a)
	(== a x))]
     [(fresh [d]
	(cdro l d)
	(membero x d))]))
#+END_SRC

#+RESULTS:
: #'user/membero
: 
** Frame 47
#+BEGIN_SRC clojure :results pp
  (defrel membero [x l]
    (conde
     [(caro l x)]
     [(fresh [d]
	(cdro l d)
	(membero x d))]))
#+END_SRC

#+RESULTS:
: #'user/membero
: 

We can get rid of the fusing of =x= and =a= because that's the only reason we introduced =a=.
** Frame 55
#+BEGIN_SRC clojure :results pp
(run* [y] (membero y (llist 'pear 'grape 'peaches)))
#+END_SRC

#+RESULTS:
: (pear grape)
: 

The reason ='peaches= is because this isn't a proper list, ='peaches= isn't a list so none of the =conde= stanzas pass.
** Frame 58
We've pointed out that =run*= and =run= can fill the blanks in anywhere to make the goals successful.
** Frame 59
#+BEGIN_SRC clojure :results pp
(run 1 [x] (membero 'e (llist 'pasta 'e x 'fagioli)))
#+END_SRC

#+RESULTS:
: (_0)
: 

Because the first successful evaluation happens before we need to evaluate our input variable, we get back =_0=.
** Frame 60
#+BEGIN_SRC clojure :results pp
(run 1 [x] (membero 'e (llist 'pasta x 'e 'fagioli)))
#+END_SRC

#+RESULTS:
: (e)
: 

Because the first successful evaluation requires =x= to be ='e=, we get back =e=.
** Frame 63
#+BEGIN_SRC clojure :results pp
  (run* [q]
    (fresh [x y]
      (== (llist 'pasta x 'fagioli y '()) q)
      (membero 'e q)))
#+END_SRC

#+RESULTS:
: ((pasta e fagioli _0) (pasta _0 fagioli e))
: 

Again, we can fill out our lists by fusing the list to our output variable.
** Frame 64
#+BEGIN_SRC clojure :results pp
  (run 1 [l]
    (membero 'tofu l))
#+END_SRC

#+RESULTS:
: ((tofu . _0))
: 

I think this is because we know we are in a list, and thus are a =cons= pair, and we don't evaluate the =cdr= part of the pair so it comes back reified.
** Frame 66
Remember that returning an infinite number of values is the same as returning no value.
** Frame 67
#+BEGIN_SRC clojure :results pp
  (run 5 [l]
    (membero 'tofu l))
#+END_SRC

#+RESULTS:
: ((tofu . _0)
:  (_0 tofu . _1)
:  (_0 _1 tofu . _2)
:  (_0 _1 _2 tofu . _3)
:  (_0 _1 _2 _3 tofu . _4))
: 

I'm really glad I figured this out, even if I didn't realize that as an infinite list this means =run*= returns no value.
** Frame 73
#+BEGIN_SRC clojure :results pp
  (defrel proper-membero [x l]
    (conde
     [(caro l x)
      (fresh [d]
	(cdro l d)
	(listo d))]
     [(fresh [d]
	(cdro l d)
	(proper-membero x d))]))
#+END_SRC

#+RESULTS:
: #'user/proper-membero
: 
** Frame 74
#+BEGIN_SRC clojure :results pp
(run 12 [l] (proper-membero 'tofu l))
#+END_SRC

#+RESULTS:
#+begin_example
((tofu)
 (tofu _0)
 (tofu _0 _1)
 (_0 tofu)
 (tofu _0 _1 _2)
 (tofu _0 _1 _2 _3)
 (_0 tofu _1)
 (tofu _0 _1 _2 _3 _4)
 (tofu _0 _1 _2 _3 _4 _5)
 (_0 tofu _1 _2)
 (_0 _1 tofu)
 (tofu _0 _1 _2 _3 _4 _5 _6))

#+end_example

I don't get why it evaluates in this order but order doesn't matter.
** Frame 75
#+BEGIN_SRC clojure :results pp
  (defn proper-member? [x l]
    (cond
      (empty? l) false
      (== (first l) x) (list? (rest l))
      :else (proper-member? x (rest l))))
#+END_SRC

#+RESULTS:
: #'user/proper-member?
: 
* Chapter 4. Double Your Fun
** Frame 6
Note that because =append= doesn't look at the =cdr= value, we can produce improper lists.
** Frame 8
#+BEGIN_SRC clojure :results pp
  (defrel appendo1 [l t out]
    (conde
     [(nullo l) (== t out)]
     [(fresh [res]
	(fresh [d]
	  (cdro l d)
	  (appendo d t res))
	(fresh [a]
	  (caro l a)
	  (conso a res out)))]))
#+END_SRC

#+RESULTS:
: #'user/appendo
: 

Note that we have an output parameter here.
** The Translation (Final)
To translate a function into a relation, first replace define with =defrel=. Then unnest each expression in each =cond= line, and replace each =cond= with =conde=. To unnest a =true=, replace it with =s#=. To unnest a =false=, replace it with =u#=.

If the value of at least one =cond= line can be a /non/-Boolean, add an argument, say =out=, to =defrel= to hold what would have been the function's value. When unnesting a line whose value is not a Boolean, ensure that either some value is associated with =out=, and that =out= is the last argument to a recursion.
** Frame 11
#+BEGIN_SRC clojure :results pp
  (defrel appendo2 [l t out]
    (conde
     [(nullo l) (== t out)]
     [(fresh [a d res]
	(cdro l d)
	(appendo d t res)
	(caro l a)
	(conso a res out))]))
#+END_SRC

We can reduce our nested =fresh= calls into one.
** Frame 13
#+BEGIN_SRC clojure :results silent
  (defrel appendo3 [l t out]
    (conde
     [(nullo l) (== t out)]
     [(fresh [a d res]
	(conso a d l)
	(appendo d t res)
	(conso a res out))]))
#+END_SRC

We can replace our =caro= and =cdro= with =cons=.
** Frame 15
The first cons, =(conso a d l)=, is used to split out =l= into two components we can work with, =a= and =d=.

The second cons, =(conso a res out)=, is used to combine results we know, =a= and =res=, into a single output list, =out=.
** Frame 17
Just work your way through each case, recursing, figuring out possible values of each subcomponent

You can think about it in terms of:

Case 1. =l= is ='()=

Case 2.
=l= is not empty, so in our second branch, we know that =l= can be split into =(cons a d l)=

Now we step through =(appendo 'd 't res)=, we know =d= is some list. By the same =cons= as before, we need to consider:
If =d= is null, we know that =l= is =(a)= which is =(_0)=

If it isn't, we have to recurse /again/, and the same two-pronged consideration happens.

Each time we recursively cover the =(nullo l)=, we go back up, and fuse the variables in the last =conso=.


And thus we have our answers. We keep creating new fresh =d= lists for our use that tack onto the previous layer's answer, and thus we keep introducing new reified variables.

Try this in a notebook
** Frame 18
=y= is always =_0= because we never wind up evaluating it as we recurse.
** Frame 20
Still remain not-smart.

We do the same above thing, line by line, no intuitive leaps. We end up with a bunch of reified variables, each recursion pushing new sub-variables into each answer's iteration.
** Frame 21
Whereas before we were looking for =y= in isolation, now we are looking at =(run6 [x y z] (appendo x y z))=, when we reify that last value is going to keep increasing as it's always the last variable to be reified.

** Frame 24
Don't get too smart; as we evaluate this we never expand =y=, so it comes back as a fresh variable at the end of a cons pair. Remember the numbers only get fixed at the very end, as we print.
** Frame 39
I don't understand how to work this out by computing it. Giving up, maybe I will understand when I get to the implementation.

Update: After many hours of thinking about this now, I think I understand.

When =out= is =()=, the way to terminate out of the non-null-l branch is when =conso= is evaluated, as =conso= cannot succeed when its output is ='()=.

But this only happens after the recursive call. The recursive call can always easily produce a value when we evaluate the case where =l= is ='()=. So that's why we can progress and get the first six values. However, because we don't evaluate =out= in a way that allows for termination until we hit that last =conso=, we will keep looping forever.

Flipping the recursive call to the end forces us to evaluate all non-recursive parts of the cond branch, and we need to make sure some condition catches and terminates the recursion there.
** The First Commandment
Within each sequence of goals, move non-recursive goals before recursive goals.
** Frame 41
I honestly don't understand how this works. I guess that appendo works better recursively when you've unified as much as possible before the recursive call? It matches normal advice around recusion?

#+BEGIN_SRC clojure :results silent
  (defrel appendo [l t out]
    (conde
     [(nullo l) (== t out)]
     [(fresh [a d res]
	(conso a d l)
	(conso a res out)
	(appendo d t res))]))
#+END_SRC
** Frame 43
#+BEGIN_SRC clojure :results silent
  (defrel swappendo [l t out]
    (conde
     [(fresh [a d res]
	(conso a d l)
	(conso a res out)
	(appendo d t res))]
     [(nullo l) (== t out)]))
#+END_SRC
** The Law of Swapping conde Lines
Swapping two conde lines does not affect the values contributed by conde.
** Frame 47
#+BEGIN_SRC clojure :results silent
  (defrel unwrapo [x out]
    (conde [(fresh [a]
	      (caro x a)
	      (unwrap a out))]
	   [(== x out)]))
#+END_SRC

Note how we can remove =(pairo ...)= because it doesn't do anything for us in terms of passing along a value, and because our caro will fail if pairo fails, rendering pairo redundant.
** Frame 49
The reason we keep seeing partially unwrapped values is because we have a =conde=, where one of the branches spits out the input as is, and thus it is considered a successful value.

(from the book: "~unwrapo~ is a tricky relation whose behaviour does not fully comply with the behaviour of the function ~unwrapo~. Nevertheless, by keeping track of the fusing, you can follow the =pizza= example.")

I don't know why we're ok with this and not throwing in logic to only include a singleton? Maybe we can't?
** Frame 54
I think the point of this and frame 53 is to show that wrapping the input in a list means that your result is just one unwrapping earlier/later based on the values of the invocation, but it's otherwise basically infinite unwrapping possibilities.
* Chapter 5. Members Only
** Frame 4
#+BEGIN_SRC clojure :results silent
  (defrel memo1 [x l out]
    (conde [(nullo l) u#]
	   [(fresh [a]
	      (caro l a)
	      (== a x))
	    (== l out)]
	   [s# (fresh [d]
		 (cdro l d)
		 (memo x d out))]))

  (defrel memo2 [x l out]
    (fresh [a d]
      (cons a d l)
      (conde [(== a x) (== l out)]
	     [(memo x d out)])))

  (defrel memo [x l out]
    (conde [(caro l x) (== l out)]
	   [(fresh [d]
	      (cdro l d)
	      (memo x d out))]))
#+END_SRC

=memo= is what the book produces as an optimized version. It's straightforwardly doing the book's "translation" algorithm, but also removes the need for a first =(fresh [a] ...)= because we don't need to create a fresh variable when we're just going to equate it with =x=.

Before reading the solution, I tried making a version that first split out =l= using =(cons a d l)=, which seemed more elegant, but it again produces a fresh variable (=a=) that we don't need. Also, maybe there's some merit to how the book's version dones't lift the fresh =d= variable to need any more scope than it absolutely has to have? Mine maybe has an =a= and =d= fresh variable set that is further out than it needs to be.
** Frame 12
Remember that =(run 1 ...)= means we will search for a single solution no matter how long it takes.

So we will run at least one time, and we will find at most one association.
** Frame 16
It's made explicit here that we always evaluate every =conde= branch for possible solutions.
** Frame 17
=cond= in standard scheme goes down one branch only on each run.

=conde= in "The Reasoned Schemer?" evaluates _every_ branch for possible solutions.
** Frame 25
#+BEGIN_SRC clojure :results silent
  (defrel rembero1 [x l out]
    (conde [(nullo l) (== '() out)]
	   [(fresh [a]
	      (caro l a)
	      (== a x))
	    (cdro l out)]
	   [s# (fresh [res]
		 (fresh [d]
		   (cdro l d)
		   (rembero1 x d res))
		 (fresh [a]
		   (caro l a)
		   (conso a res out)))]))

  (defrel rembero [x l out]
    (conde [(nullo l) (== '() out)]
	   [(conso x out l)]
	   [(fresh [a d res]
	      (conso a d l)
	      (conso a res out)
	      (rembero x d res))]))
#+END_SRC
** Frame 27
Three values:
1. iteration 1 cond 2
2. iteration 1 cond 3 ('pea) prepended to iteration 2 cond 2 ('())
3. iteration 1 cond 3 ('pea) prepended to iteration 2 cond 3 ('pea) prepended to iteration 3 cond 1 ('())
** Frame 28
#+BEGIN_SRC clojure :results pp
  (run* [out]
    (fresh [y z]
      (rembero y (llist 'a 'b y 'd z 'e '()) out)))
#+END_SRC

#+RESULTS:
: ((b a d _0 e)
:  (a b d _0 e)
:  (a b d _0 e)
:  (a b d _0 e)
:  (a b _0 d e)
:  (a b e d _0)
:  (a b _0 d _1 e))
: 

Iter 1 Case 2 (if y == a): ~(b a d _0 e)~
Recurse under Iter 1 Case 3...
Iter 2 Case 2 (if y == b): ~(a b d _0 e)~
Recurse under Iter 2 Case 3...
Iter 3 Case 2 (just remove y): ~(a b d _0 e)~ (doesn't matter what z is)
Recurse under Iter 3 Case 3...
Iter 4 Case 2 (y == d): ~(a b d _0 e)~
Recurse under Iter 4 Case 3...
Iter 5 Case 2 (y == z): ~(a b _0 d e)~ ('y stays, 'z goes)
Recuse under Iter 5 Case 3:
Iter 6 Case 2 (y == e): ~(a b e d _0)~
Recuse under Iter 6 Case 4:
Iter 6 Case 1: ~(a b _0 d _1 e)~
Can't recurse because we can't conso to produce an empty list.
** Frame 48
#+BEGIN_SRC clojure :results pp
  (run* [y z]
    (rembero y (llist y 'd z 'e '()) (llist y 'd 'e '())))
#+END_SRC

#+RESULTS:
: ([d d] [d d] [_0 _0] [e e])
: 


Iter 1, Case 2:


~([_y] d _z e)~ = ~(_y d e)~ -> _y = d (since _y's value is always being deleted)

~([d] d _z e)~ = ~(d d e)~ -> _z = d (to match)

~([d] d d e)~ =  ~(d d e)~ -> *(d d)*


Iter 2, Case 2:


~(_y [d] _z e)~ = ~(_y d e)~ -> _y = d (since _y's value is always being deleted)

~(d [d] _z e)~ = ~(d d e)~ -> _z = d (to match)

~(d [d] d e)~ = ~(d d e)~ -> *(d d)*


Iter 3, Case 2:


~(_y d [_z] e])~ = ~(_y d e)~ -> _y = _z (since _y's value is always being deleted)

~(_y d [_y] e])~ = ~(_y d e)~ -> _y = _0, value doesn't matter

~(_0 d [_0] e])~ = ~(_0 d e)~ -> *(_0 _0)*


Iter 4, Case 2:


~(_y d _z [e])~ = ~(_y d e)~ -> _y = e (since _y's value is always being deleted)

~(e d _z [e])~ = ~(e d e)~ -> _z = e (to match)

~(e d e [e])~ = ~(e d e)~ -> *(e e)*

** Frame 56
#+BEGIN_SRC clojure :results pp
  (run 4 [y z w out]
    (rembero y (lcons z w) out))
#+END_SRC


Iter 1:


_y = ?, _z = ?, _w = ?, _out = ?

x = _y, _l = (_z . _w), out = _out


Iter 1 Case 2:


~(conso x out l)~

~(conso _y _out (_z . _w))~ -> _z = _y

~(conso _y _out (_y . _w))~ -> _z = _y, _out = _w

~(conso _y _w (_y . _w))~ -> _z = _y, _out = _w

*(_0 _0 _1 _1)*


Iter 1 Case 3:


~(conso _z _w '(_z . _w))~

~(conso _z _res _out)~ -> ~(conso _z _res (_z . _res))~

~(rembero _y _w _res)~ -> Run Iter 2


Iter 2:


x = _y, _l = _w, out = _res


Iter 2 Case 1:


Assume l = _w = () -> l = (), out = ()

_w = l = (), out = () -> _w = (), _res = ()


Pop back up the stack to Iter 1 Case 3:


~(rembero _y () ())~

~(conso _z () (_z))~

*(_0 _1 () (_1))*


Iter 2 Case 2:


Assume ~(conso x out l)~

~(conso _y _res _w)~

~(conso _y _res (_y . _res)~

x = _y, out = _res, l = w = (_y . _res)


Pop back up the stack to Iter 1 Case 3:


~(rembero _y (_y . _res1) _res1~

~(conso _z _res1 (_z . _res1))~

_y = _0, _z = _1, _w = (_y . _res1), out = (_z . _res1)

_y = _0, _z = _1, _w = (_0 . _2), out = (_1 . _2)

*(_0 _1, (_0 . _2) (_1 . _2))*


Iter 2 Case 3:


~(conso _w1 _w2 _w)~ -> ~(conso _w1 _w2 (_w1 . _w2))~

~(conso _w1 res out)~ -> ~(conso _w1 _res (_w1 . _res))~

~(rembero _y _w2 _res)~ -> Run Iter 3


Iter 3:


x = _y, _l = _w2, out = ?


Iter 3 Case 1:


Assume l is '() -> l = _w2 = (), out = ()


Pop back up the stack to Iter 2 Case 3:


~(rembero _y '() '())~ -> x = _y, d = _w2 = (), res = ()

~(conso _w1 res (_w1 . _res))~ -> ~(conso _w1 '() (_w1))~

_y = _0, _w = (_w1), out = (_w1)


Pop back up the stack to Iter 1 Case 3:


~(rembero _y _w _res)~ -> ~(rembero _y (_w1) (_w1)~

~(conso _z (_w1) (_z _w1))~

_y = _0, _z = _1, _w = (_w1) = (_2), out = (_z _w1) = (_1 _2)

*(_0 _1 (_2) (_1 _2))*
** Frame 61
Iter 3 Case 2:


Assume ~(conso x out l)~

~(conso _y _res _w2)~

~(conso _y _res (_y . _res)~

x = _y, out = _res, l = _w2 = (_y . _res)


Pop back up the stack to Iter 2 Case 3:


~(rembero _y (_y . _res) _res~ x = _y, d = (_y . _res), res = _res

~(conso _w1 _res (_w1 . _res))~ -> a = _w1 _out = (_w1 . _res)

~(conso _w1 (_y . _res) (_w1 _y . _res))~ -> l = (_w1 _y . _res)

x = _y, _l = (_w1 _y . _res), _out = (_w1 . _res)_


Pop back up the stack to Iter 1 Case 3:


~(rembero _y (_w1 _y . _res) (_w1 . _res)))~ -> x = _y _

~(conso _z (_w1 . res) (_z . _w1 . _res))~ -> out = (_z _w1 . _res)

~(conso _z (_w1 _y . _res) (_z _w1 _y . _res)) -> l = (_z _w1 _y . _res)

_y = _0_, _z = _1, _w = (_2 _0 _3), out = (_1 _2 . _3)

*(_0 _1 (_2 _0 . _3) (_1 _2 . _3))*
